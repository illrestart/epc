#include <iostream>
#include "ns3/tag.h"
#include "ns3/ptr.h"
#include "ns3/uinteger.h"
#include "ns3/application.h"
#include "ns3/log.h"
#include "ns3/packet.h"
#include "ns3/uinteger.h"
#include "ns3/traced-callback.h"
#include "ns3/object.h"
#include "ns3/callback.h"

#ifndef LTEEPCTAG_H
#define LTEEPCTAG_H
namespace ns3{

enum Signal_Status{
	//		int m_paraNum;
			/*
			*the flag of session or handover
			*/
		uint8_t m_Empty;

		uint8_t m_Session;
		uint8_t m_Handover;
			
			/*
			*session and handover procedure
			*/
		uint8_t m_SessionServiceRequest;
		uint8_t m_SessionAuthentication;
		uint8_t m_SessionInitialContextSetupRequest;
		uint8_t m_SessionRadioBearerEstablishment;
		uint8_t m_SessionUplinkData;
		uint8_t m_SessionInitialContextSetupComplete;
		uint8_t m_SessionModifyBearerRequest;
		uint8_t m_SessionModifyBearerRespone;
		uint8_t m_SessionPCEFInitialedIPCAN;
		uint8_t m_SessionModifyBearerResponse;

		uint8_t m_HandoverPathSwitchRequest;
		uint8_t m_HandoverModifyBearerRequest;
		uint8_t m_HandoverModifyBearerRequestToUgw;
		uint8_t m_HandoverModifyBearerResponseToUgw;
		uint8_t m_HandoverModifyBearerResponse;
		uint8_t m_HandoverEndMarkerToSourceEnb;
		uint8_t m_HandoverEndMarkerToTargetEnb;
		uint8_t m_HandoverPathSwitchRequestAck;
		uint8_t m_HandoverReleaseResource;
};
class lteEpcTag : public Tag {
	public:
		lteEpcTag();
		~lteEpcTag();

		static TypeId GetTypeId(void);

		virtual TypeId GetInstanceTypeId(void) const;

		virtual uint32_t GetSerializedSize(void) const;

		virtual void Serialize(TagBuffer) const;

		virtual void Deserialize(TagBuffer);
		
		virtual void Print(std::ostream &os)const{}

		void setM_Session();
		void setM_Handover();

		void setM_SessionServiceRequest();
		void setM_SessionAuthentication();
		void setM_SessionInitialContextSetupRequest();
		void setM_SessionRadioBearerEstablishment();
		void setM_SessionUplinkData();
		void setM_SessionInitialContextSetupComplete();
		void setM_SessionModifyBearerRequest();
		void setM_SessionModifyBearerRespone();
		void setM_SessionPCEFInitialedIPCAN();
		void setM_SessionModifyBearerResponse();

		void setM_HandoverPathSwitchRequest();
		void setM_HandoverModifyBearerRequest();
		void setM_HandoverModifyBearerRequestToUgw();
		void setM_HandoverModifyBearerResponseToUgw();
		void setM_HandoverModifyBearerResponse();
		void setM_HandoverEndMarkerToSourceEnb();
		void setM_HandoverEndMarkerToTargetEnb();
		void setM_HandoverPathSwitchRequestAck();
		void setM_HandoverReleaseResource();

		uint8_t getM_Session();
		uint8_t getM_Handover();

		uint8_t getM_SessionServiceRequest();
		uint8_t getM_SessionAuthentication();
		uint8_t getM_SessionInitialContextSetupRequest();
		uint8_t getM_SessionRadioBearerEstablishment();
		uint8_t getM_SessionUplinkData();
		uint8_t getM_SessionInitialContextSetupComplete();
		uint8_t getM_SessionModifyBearerRequest();
		uint8_t getM_SessionModifyBearerRespone();
		uint8_t getM_SessionPCEFInitialedIPCAN();
		uint8_t getM_SessionModifyBearerResponse();

		uint8_t getM_HandoverPathSwitchRequest();
		uint8_t getM_HandoverModifyBearerRequest();
		uint8_t getM_HandoverModifyBearerRequestToUgw();
		uint8_t getM_HandoverModifyBearerResponseToUgw();
		uint8_t getM_HandoverModifyBearerResponse();
		uint8_t getM_HandoverEndMarkerToSourceEnb();
		uint8_t getM_HandoverEndMarkerToTargetEnb();
		uint8_t getM_HandoverPathSwitchRequestAck();
		uint8_t getM_HandoverReleaseResource();

		
		uint8_t m_status;
};

}
#endif
