
#include "ugw-application.h"
#include "ns3/log.h"
#include "ns3/simulator.h"

NS_LOG_COMPONENT_DEFINE("ugwApplication");

namespace ns3{

TypeId ugwApplication::GetTypeId(void){
	static TypeId tid = TypeId("ns3::ugwApplication")
		.SetParent<Object>();
	return tid;
}

void ugwApplication::DoDispose(void){
	NS_LOG_FUNCTION(this);
}

ugwApplication::ugwApplication(Ptr<Node> ugwNode,Ipv4InterfaceContainer controllerUgwIfc,int enbport,Ipv4InterfaceContainer ugwEnbIfc,int controllerport)
	:m_ugwNode(ugwNode),
	m_controllerUgwIfc(controllerUgwIfc),
        m_ugwEnbIfc(ugwEnbIfc),
	m_enbPort(enbport),
	m_controllerPort(controllerport)
{
	m_port = 8086;
	InitSocket();
}
ugwApplication::~ugwApplication(void){
	NS_LOG_FUNCTION(this);
}
void ugwApplication::InitRecvSocket(){
	m_socketController = Socket::CreateSocket(m_ugwNode,TypeId::LookupByName("ns3::UdpSocketFactory"));
	m_socketController->Bind(InetSocketAddress(m_controllerUgwIfc.GetAddress(1),8086));

	m_socketEnb = Socket::CreateSocket(m_ugwNode,TypeId::LookupByName("ns3::UdpSocketFactory"));
	m_socketEnb->Bind(InetSocketAddress(m_ugwEnbIfc.GetAddress(0),m_port));

}
void ugwApplication::InitSendSocket(){
	m_sendToControllerSocket = Socket::CreateSocket(m_ugwNode,TypeId::LookupByName("ns3::UdpSocketFactory"));
	m_sendToControllerSocket->Bind(InetSocketAddress(m_controllerUgwIfc.GetAddress(1),8085));

	m_sendToEnbSocket = Socket::CreateSocket(m_ugwNode,TypeId::LookupByName("ns3::UdpSocketFactory"));
	m_sendToEnbSocket->Bind(InetSocketAddress(m_ugwEnbIfc.GetAddress(0),8084));

}
void ugwApplication::InitSocket(){
	InitRecvSocket();

	InitSendSocket();
}

void ugwApplication::StartApplication(){
	NS_LOG_FUNCTION(this);	
	m_socketController->SetRecvCallback(MakeCallback(&ugwApplication::RecvFromEnbSocket,this));
	m_socketEnb->SetRecvCallback(MakeCallback(&ugwApplication::RecvFromEnbSocket,this));
}
void ugwApplication::StopApplication(){
	NS_LOG_FUNCTION(this);	
}
void ugwApplication::ProcessSession(lteEpcTag tag){
	Ptr<Packet> packetSend = Create<Packet>();
	lteEpcTag tagSend;
	tagSend.m_count = tag.m_count;
	std::cout<<"ugw\t\t: ";
	if(tag.m_status == (uint8_t)m_SessionModifyBearerRequest){
		std::cout<<"receive controller modifybearerrequest ";
		tagSend.setM_Session();
		tagSend.setM_SessionModifyBearerResponse();
		packetSend->AddPacketTag(tagSend);
		m_sendToControllerSocket->SendTo(packetSend,0,InetSocketAddress(m_controllerUgwIfc.GetAddress(0),m_controllerPort));
	}
	std::cout<<"\t:tag number"<<tag.m_count<<std::endl;
} 
void ugwApplication::ProcessPacket(Ptr<Packet> packet){
/*	lteEpcTag tag;
	packet->RemovePacketTag(tag);
	ProcessSession(tag);
	Ptr<Packet> packet;
	m_mutex.Lock();
	if(m_vec.size() == 0) std::cout<<"warning\n";
	packet = m_vec[m_vec.size() - 1];
	m_vec.pop_back();
	m_mutex.Unlock();*/
	lteEpcTag tag;
	packet->RemovePacketTag(tag);
	if(tag.m_flag == (uint8_t)m_Session){
		ProcessSession(tag);	
	}
}
void ugwApplication::ProcessThread(void){
//	while(1){
//		m_signal.wait();
//		if(m_vec.size() > 0 ) ProcessPacket();	
//	}
//	m_mutex.Lock();
//	if(m_vec.size() > 0){
//		m_mutex.Unlock();
//		ProcessPacket();
//	}
//	else{
//		m_mutex.Unlock();
//	}
}
void ugwApplication::RecvFromEnbSocket(Ptr<Socket> socket){
	Ptr<Packet> packet = socket->Recv();
	Simulator::Schedule(Simulator::Now(),&ugwApplication::ProcessPacket,this,packet);
}

}
